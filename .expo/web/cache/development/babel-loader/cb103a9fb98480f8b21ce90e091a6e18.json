{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\allar\\\\OneDrive\\\\Escritorio\\\\CCT\\\\Mobile Development\\\\Projects\\\\gps-stats\\\\client\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Group } from \"react-native-web/dist/index\";\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\nimport List from \"./List\";\nexport default function App() {\n  var _useState = useState({\n    latitude: 0,\n    longitude: 0,\n    location: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var findLocation = function findLocation(lat, long) {\n    var url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      if ('district' in json.results[0].components) {\n        return setUser({\n          latitude: lat,\n          longitude: long,\n          location: json.results[0].components.district\n        });\n      } else {\n        if ('town' in json.results[0].components) {\n          return setUser({\n            latitude: lat,\n            longitude: long,\n            location: json.results[0].components.town\n          });\n        } else {\n          return setUser({\n            latitude: lat,\n            longitude: long,\n            location: \"Other\"\n          });\n        }\n      }\n    });\n  };\n\n  function locateMe() {\n    Geolocation.getCurrentPosition(function (position) {\n      findLocation(position.coords.latitude, position.coords.longitude);\n    }, function (error) {\n      console.log(\"couldn't get position\");\n    }, {\n      enableHighAccuracy: true,\n      timeout: 20000,\n      maximumAge: 2000\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Welcome to GPS Sensor App!\"), React.createElement(Button, {\n    onPress: locateMe,\n    title: \"Locate Me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, user.latitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, user.longitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, user.location), React.createElement(List, {\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/allar/OneDrive/Escritorio/CCT/Mobile Development/Projects/gps-stats/client/App.js"],"names":["StatusBar","React","useCallback","useState","Group","io","Geolocation","List","App","latitude","longitude","location","user","setUser","findLocation","lat","long","url","fetch","then","response","json","results","components","district","town","locateMe","getCurrentPosition","position","coords","error","console","log","enableHighAccuracy","timeout","maximumAge","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useState } from 'react';\nimport { StyleSheet, Text, View, Button, Group } from 'react-native';\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\nimport List from './List'\n\n//const socket = io.connect('http://localhost:3000');\n\nexport default function App() {\n  const [user, setUser] = useState({latitude: 0, longitude: 0, location: ''});\n  //const [items, setItems] = useState([]);\n\n  let findLocation= (lat, long) =>{\n    let url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n      fetch(url) \n      .then((response) => {\n        return response.json()\n      })    \n      .then((json) => {\n        if('district' in json.results[0].components){         \n          return setUser({latitude: lat, longitude: long, location: json.results[0].components.district}); \n        } else {\n          if('town' in json.results[0].components){\n            return setUser({latitude: lat, longitude: long, location: json.results[0].components.town}); \n          } else {\n            return setUser({latitude: lat, longitude: long, location: \"Other\"}); \n          }\n        } \n        /*return setItems([...items, {\n          id: items.length,\n          value: Math.floor(Math.random() * 10) + 1\n        }]);   */    \n    }); \n  }\n\n\n  function locateMe(){  \n    Geolocation.getCurrentPosition(position =>{\n      findLocation(position.coords.latitude,position.coords.longitude); \n    }, error => {\n      console.log(\"couldn't get position\");\n    }, {enableHighAccuracy: true, timeout: 20000, maximumAge: 2000});  \n  } \n  \n\n  return (\n    <View style={styles.container}>\n      <Text>Welcome to GPS Sensor App!</Text>\n      <Button onPress={locateMe} title=\"Locate Me\"/>   \n      <Text>{user.latitude}</Text>\n      <Text>{user.longitude}</Text>\n      <Text>{user.location}</Text> \n      <List user={user}/>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}