{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\allar\\\\OneDrive\\\\Escritorio\\\\CCT\\\\Mobile Development\\\\Projects\\\\gps-stats\\\\client\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Group } from \"react-native-web/dist/index\";\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\nvar socket = io.connect('http://localhost:3000');\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState({\n    latitude: 0,\n    longitude: 0,\n    location: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      items = _useState4[0],\n      setItems = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      group = _useState6[0],\n      setGroup = _useState6[1];\n\n  useEffect(function () {\n    socket.on('position', function (_ref) {\n      var latitude = _ref.latitude,\n          longitude = _ref.longitude,\n          location = _ref.location;\n      setGroup([].concat(_toConsumableArray(group), [{\n        latitude: latitude,\n        longitude: longitude,\n        location: location\n      }]));\n    });\n  });\n\n  var findLocation = function findLocation(lat, long) {\n    var url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      var loc = \"Other\";\n\n      if ('district' in json.results[0].components) {\n        loc = json.results[0].components.district;\n        setUser({\n          latitude: lat,\n          longitude: long,\n          location: loc\n        });\n      } else if ('town' in json.results[0].components) {\n        loc = json.results[0].components.town;\n        setUser({\n          latitude: lat,\n          longitude: long,\n          location: loc\n        });\n      }\n\n      socket.emit('position', {\n        lat: lat,\n        long: long,\n        loc: loc\n      });\n      return setItems([].concat(_toConsumableArray(items), [{\n        id: items.length + 1,\n        location: loc\n      }]));\n    });\n  };\n\n  function locateMe() {\n    Geolocation.getCurrentPosition(function (position) {\n      findLocation(position.coords.latitude, position.coords.longitude);\n    }, function (error) {\n      console.log(\"couldn't get position\");\n    }, {\n      enableHighAccuracy: true,\n      timeout: 20000,\n      maximumAge: 2000\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Welcome to GPS Sensor App!\"), React.createElement(Button, {\n    onPress: locateMe,\n    title: \"Locate Me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, user.latitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, user.longitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, user.location), React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, items.map(function (item) {\n    return React.createElement(\"li\", {\n      key: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, item.location);\n  }), React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Number of elements: \", items.length))), React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, group.map(function (_ref2, index) {\n    var latitude = _ref2.latitude,\n        longitude = _ref2.longitude,\n        location = _ref2.location;\n    return React.createElement(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, index + location);\n  }), React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Number of elements: \", group.length))), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/allar/OneDrive/Escritorio/CCT/Mobile Development/Projects/gps-stats/client/App.js"],"names":["StatusBar","React","useCallback","useEffect","useState","Group","io","Geolocation","socket","connect","App","latitude","longitude","location","user","setUser","items","setItems","group","setGroup","on","findLocation","lat","long","url","fetch","then","response","json","loc","results","components","district","town","emit","id","length","locateMe","getCurrentPosition","position","coords","error","console","log","enableHighAccuracy","timeout","maximumAge","styles","container","map","item","index","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, Button, Group } from 'react-native';\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\n\nconst socket = io.connect('http://localhost:3000');\n\nexport default function App() {\n  const [user, setUser] = useState({latitude: 0, longitude: 0, location: ''});\n  const [items, setItems] = useState([]);\n  const [group, setGroup] = useState([]);\n  \n  useEffect(()=>{\n    socket.on('position',({latitude, longitude, location})=>{\n      setGroup([...group, {latitude,longitude,location}]);\n    });\n  });\n\n  let findLocation= (lat, long) =>{\n  let url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url) \n    .then((response) => {\n      return response.json()\n    })    \n    .then((json) => {\n      let loc = \"Other\";\n      if('district' in json.results[0].components){         \n        loc = json.results[0].components.district;\n        setUser({latitude: lat, longitude: long, location: loc}); \n      } else if ('town' in json.results[0].components){\n        loc = json.results[0].components.town;\n        setUser({latitude: lat, longitude: long, location: loc});           \n      }\n      socket.emit('position',{lat,long,loc});\n      return setItems([...items, {\n        id: items.length+1,\n        location: loc\n      }]);      \n  }); \n  }\n\n\n  function locateMe(){  \n    Geolocation.getCurrentPosition(position =>{\n      findLocation(position.coords.latitude,position.coords.longitude); \n    }, error => {\n      console.log(\"couldn't get position\");\n    }, {enableHighAccuracy: true, timeout: 20000, maximumAge: 2000});  \n  } \n  \n\n  return (\n    <View style={styles.container}>\n      <Text>Welcome to GPS Sensor App!</Text>\n      <Button onPress={locateMe} title=\"Locate Me\"/>   \n      <Text>{user.latitude}</Text>\n      <Text>{user.longitude}</Text>\n      <Text>{user.location}</Text> \n      <div>        \n        <ul>                \n            {items.map(item =>(\n                <li key={item.id}>{item.location}</li>\n            ))}\n            <li>Number of elements: {items.length}</li>\n        </ul>\n      </div>\n      <div>        \n        <ul>                \n            {group.map(({latitude,longitude,location},  index) =>(\n                <li key={index}>{index + location}</li>\n            ))}\n            <li>Number of elements: {group.length}</li>\n        </ul>\n      </div>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}