{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\allar\\\\OneDrive\\\\Escritorio\\\\CCT\\\\Mobile Development\\\\Projects\\\\gps-stats\\\\client\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Group } from \"react-native-web/dist/index\";\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\nimport { render } from 'react-dom';\nvar socket = io.connect('http://localhost:3000');\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState({\n    latitude: 0,\n    longitude: 0,\n    location: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      stats = _useState4[0],\n      setStats = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      timer = _useState6[0],\n      setTimer = _useState6[1];\n\n  useEffect(function () {\n    setTimeout(function () {\n      setTimer(timer + 10);\n    }, 10000);\n  }, [timer]);\n  socket.on('newStats', function (data) {\n    for (var i = 0; i < data.length; i++) {\n      setStats([].concat(_toConsumableArray(stats), [{\n        location: data[i].location,\n        counter: data[i].counter\n      }]));\n    }\n\n    console.log(stats);\n  });\n\n  var findLocation = function findLocation(lat, long) {\n    var url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      var loc = \"Other\";\n\n      if ('district' in json.results[0].components) {\n        loc = json.results[0].components.district;\n        setUser({\n          latitude: lat,\n          longitude: long,\n          location: loc\n        });\n      } else if ('town' in json.results[0].components) {\n        loc = json.results[0].components.town;\n        setUser({\n          latitude: lat,\n          longitude: long,\n          location: loc\n        });\n      } else {\n        setUser({\n          latitude: lat,\n          longitude: long,\n          location: loc\n        });\n      }\n\n      return socket.emit('sendData', {\n        lat: lat,\n        long: long,\n        loc: loc\n      });\n    });\n  };\n\n  function locateMe() {\n    Geolocation.getCurrentPosition(function (position) {\n      findLocation(position.coords.latitude, position.coords.longitude);\n    }, function (error) {\n      console.log(\"couldn't get position\");\n    }, {\n      enableHighAccuracy: true,\n      timeout: 20000,\n      maximumAge: 2000\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"Welcome to GPS Sensor App!\"), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, timer), React.createElement(Button, {\n    onPress: locateMe,\n    title: \"Locate Me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, user.latitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, user.longitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, user.location), React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, stats.map(function (_ref, index) {\n    var location = _ref.location,\n        counter = _ref.counter;\n    return React.createElement(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, location, \":\", counter);\n  })), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/allar/OneDrive/Escritorio/CCT/Mobile Development/Projects/gps-stats/client/App.js"],"names":["StatusBar","React","useCallback","useEffect","useState","Group","io","Geolocation","render","socket","connect","App","latitude","longitude","location","user","setUser","stats","setStats","timer","setTimer","setTimeout","on","data","i","length","counter","console","log","findLocation","lat","long","url","fetch","then","response","json","loc","results","components","district","town","emit","locateMe","getCurrentPosition","position","coords","error","enableHighAccuracy","timeout","maximumAge","styles","container","map","index","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, Button, Group } from 'react-native';\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\nimport { render } from 'react-dom';\n\nconst socket = io.connect('http://localhost:3000');\n\nexport default function App() {\n  const [user, setUser] = useState({latitude: 0, longitude: 0, location: ''});\n  const [stats, setStats] = useState([]);\n\n  const [timer, setTimer] = useState(0);\n\n    useEffect(()=>{\n        setTimeout(()=>{\n            setTimer(timer+10);\n            //socket.emit('refresh');\n        },10000);\n    }, [timer]);\n  \n  socket.on('newStats',data=>{  \n    for(var i=0; i<data.length;i++){\n      setStats([...stats, {location: data[i].location, counter: data[i].counter}]);\n    }\n    console.log(stats);\n  }); \n\n  let findLocation= (lat, long) =>{\n  let url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url) \n    .then((response) => {\n      return response.json()\n    })    \n    .then((json) => {\n      let loc = \"Other\";\n      if('district' in json.results[0].components){         \n        loc = json.results[0].components.district;\n        setUser({latitude: lat, longitude: long, location: loc}); \n      } else if ('town' in json.results[0].components){\n        loc = json.results[0].components.town;\n        setUser({latitude: lat, longitude: long, location: loc});           \n      } else {\n        setUser({latitude: lat, longitude: long, location: loc});  \n      }\n      //const {latitude, longitude, location} = user;\n      //console.log({latitude, longitude, location});\n      //return socket.emit('position',{latitude,longitude,location}); \n      return socket.emit('sendData',{lat,long,loc});\n  }); \n  }\n\n\n  function locateMe(){  \n      \n    Geolocation.getCurrentPosition(position =>{\n      findLocation(position.coords.latitude,position.coords.longitude); \n    }, error => {\n      console.log(\"couldn't get position\");\n    }, {enableHighAccuracy: true, timeout: 20000, maximumAge: 2000});  \n  } \n  \n\n  return (\n    <View style={styles.container}>\n      <Text>Welcome to GPS Sensor App!</Text>\n      <Text>{timer}</Text>\n      <Button onPress={locateMe} title=\"Locate Me\"/>   \n      <Text>{user.latitude}</Text>\n      <Text>{user.longitude}</Text>\n      <Text>{user.location}</Text>\n      <ul>\n        {stats.map(({location, counter},  index) =>(\n                <li key={index}>{location}:{counter}</li>\n            ))}\n      </ul>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}