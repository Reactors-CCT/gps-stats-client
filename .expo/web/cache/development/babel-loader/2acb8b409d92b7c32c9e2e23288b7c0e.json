{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\allar\\\\OneDrive\\\\Escritorio\\\\CCT\\\\Mobile Development\\\\Projects\\\\gps-stats\\\\client\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Group } from \"react-native-web/dist/index\";\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\nexport default function App() {\n  var _useState = useState({\n    latitude: 0,\n    longitude: 0,\n    location: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      items = _useState4[0],\n      setItems = _useState4[1];\n\n  var findLocation = function findLocation(lat, long) {\n    var url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      if ('district' in json.results[0].components) {\n        setUser({\n          latitude: lat,\n          longitude: long,\n          location: json.results[0].components.district\n        });\n      } else {\n        if ('town' in json.results[0].components) {\n          setUser({\n            latitude: lat,\n            longitude: long,\n            location: json.results[0].components.town\n          });\n        } else {\n          setUser({\n            latitude: lat,\n            longitude: long,\n            location: \"Other\"\n          });\n        }\n      }\n\n      return setGroup([].concat(_toConsumableArray(items), [{\n        id: items.length,\n        value: Math.floor(Math.random() * 10) + 1\n      }]));\n    });\n  };\n\n  function locateMe() {\n    var _this = this;\n\n    Geolocation.getCurrentPosition(function (position) {\n      findLocation(position.coords.latitude, position.coords.longitude);\n    }, function (error) {\n      console.log(\"couldn't get position\");\n    }, {\n      enableHighAccuracy: true,\n      timeout: 20000,\n      maximumAge: 2000\n    });\n    return React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, items.map(function (item) {\n      return React.createElement(\"li\", {\n        key: item.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }, item.value);\n    })));\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Welcome to GPS Sensor App!\"), React.createElement(Button, {\n    onPress: locateMe,\n    title: \"Locate Me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, user.latitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, user.longitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, user.location), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/allar/OneDrive/Escritorio/CCT/Mobile Development/Projects/gps-stats/client/App.js"],"names":["StatusBar","React","useCallback","useState","Group","io","Geolocation","App","latitude","longitude","location","user","setUser","items","setItems","findLocation","lat","long","url","fetch","then","response","json","results","components","district","town","setGroup","id","length","value","Math","floor","random","locateMe","getCurrentPosition","position","coords","error","console","log","enableHighAccuracy","timeout","maximumAge","map","item","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useState } from 'react';\nimport { StyleSheet, Text, View, Button, Group } from 'react-native';\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\n\n//const socket = io.connect('http://localhost:3000');\n\nexport default function App() {\n  const [user, setUser] = useState({latitude: 0, longitude: 0, location: ''});\n  const [items, setItems] = useState([]);\n\n  let findLocation= (lat, long) =>{\n    let url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n      fetch(url) \n      .then((response) => {\n        return response.json()\n      })    \n      .then((json) => {\n        if('district' in json.results[0].components){         \n          setUser({latitude: lat, longitude: long, location: json.results[0].components.district}); \n        } else {\n          if('town' in json.results[0].components){\n            setUser({latitude: lat, longitude: long, location: json.results[0].components.town}); \n          } else {\n            setUser({latitude: lat, longitude: long, location: \"Other\"}); \n          }\n        } \n        return setGroup([...items, {\n          id: items.length,\n          value: Math.floor(Math.random() * 10) + 1\n        }])       \n    }); \n  }\n\n\n  function locateMe(){  \n    Geolocation.getCurrentPosition(position =>{\n      findLocation(position.coords.latitude,position.coords.longitude); \n    }, error => {\n      console.log(\"couldn't get position\");\n    }, {enableHighAccuracy: true, timeout: 20000, maximumAge: 2000});  \n    return(\n      <div>\n        <ul>\n          {items.map(item => (\n            <li key={item.id}>{item.value}</li>\n          ))}\n        </ul>\n      </div> \n    )\n  } \n  \n\n  return (\n    <View style={styles.container}>\n      <Text>Welcome to GPS Sensor App!</Text>\n      <Button onPress={locateMe} title=\"Locate Me\"/>   \n      <Text>{user.latitude}</Text>\n      <Text>{user.longitude}</Text>\n      <Text>{user.location}</Text> \n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}