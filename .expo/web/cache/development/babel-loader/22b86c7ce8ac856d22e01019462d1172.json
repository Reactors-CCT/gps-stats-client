{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\allar\\\\OneDrive\\\\Escritorio\\\\CCT\\\\Mobile Development\\\\Projects\\\\gps-stats\\\\client\\\\App.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Group } from \"react-native-web/dist/index\";\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\nimport { render } from 'react-dom';\nvar socket = io.connect('http://localhost:3000');\n\nvar Statistics = function Statistics(props) {\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, props.group.map(function (_ref, index) {\n    var location = _ref.location,\n        counter = _ref.counter;\n    return React.createElement(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }\n    }, location, \":\", counter);\n  })));\n};\n\nexport default function App() {\n  var _useState = useState({\n    latitude: 0,\n    longitude: 0,\n    location: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      group = _useState4[0],\n      setGroup = _useState4[1];\n\n  var stats = [];\n  socket.on('newStats', function (data) {\n    stats = [];\n\n    for (var i = 0; i < data.length; i++) {\n      stats.push({\n        location: data[i].location,\n        counter: data[i].counter\n      });\n    }\n\n    console.log(stats);\n  });\n\n  var findLocation = function findLocation(lat, long) {\n    var url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      var loc = \"Other\";\n\n      if ('district' in json.results[0].components) {\n        loc = json.results[0].components.district;\n        setUser({\n          latitude: lat,\n          longitude: long,\n          location: loc\n        });\n      } else if ('town' in json.results[0].components) {\n        loc = json.results[0].components.town;\n        setUser({\n          latitude: lat,\n          longitude: long,\n          location: loc\n        });\n      } else {\n        setUser({\n          latitude: lat,\n          longitude: long,\n          location: loc\n        });\n      }\n\n      return socket.emit('sendData', {\n        lat: lat,\n        long: long,\n        loc: loc\n      });\n    });\n  };\n\n  function locateMe() {\n    Geolocation.getCurrentPosition(function (position) {\n      findLocation(position.coords.latitude, position.coords.longitude);\n    }, function (error) {\n      console.log(\"couldn't get position\");\n    }, {\n      enableHighAccuracy: true,\n      timeout: 20000,\n      maximumAge: 2000\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"Welcome to GPS Sensor App!\"), React.createElement(Button, {\n    onPress: locateMe,\n    title: \"Locate Me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, user.latitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, user.longitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, user.location), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, stats), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/allar/OneDrive/Escritorio/CCT/Mobile Development/Projects/gps-stats/client/App.js"],"names":["StatusBar","React","useCallback","useEffect","useState","Group","io","Geolocation","render","socket","connect","Statistics","props","group","map","index","location","counter","App","latitude","longitude","user","setUser","setGroup","stats","on","data","i","length","push","console","log","findLocation","lat","long","url","fetch","then","response","json","loc","results","components","district","town","emit","locateMe","getCurrentPosition","position","coords","error","enableHighAccuracy","timeout","maximumAge","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, Button, Group } from 'react-native';\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\nimport { render } from 'react-dom';\n\nconst socket = io.connect('http://localhost:3000');\n\nconst Statistics = (props) => {\n  return (\n    <View>              \n        <ul>                \n            {props.group.map(({location, counter},  index) =>(\n                <li key={index}>{location}:{counter}</li>\n            ))}            \n        </ul>          \n    </View>\n  );\n}\n\nexport default function App() {\n  const [user, setUser] = useState({latitude: 0, longitude: 0, location: ''});\n  const [group, setGroup] = useState([]);\n  var stats = [];\n  \n  socket.on('newStats',data=>{\n    stats = [];\n    for(var i=0; i<data.length;i++){\n      stats.push({location: data[i].location, counter: data[i].counter});\n    }  \n    console.log(stats);\n    /*setGroup([]);\n    for(var i=0; i<data.length;i++){\n      setGroup([...group, {location: data[i].location, counter: data[i].counter}]);\n    } */   \n    \n  }); \n\n  /*useEffect(()=>{\n    socket.on('position',({latitude, longitude, location})=>{\n      if(location){\n        setGroup([...group, {latitude,longitude,location}]);\n      } \n    });\n  });*/\n\n  let findLocation= (lat, long) =>{\n  let url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url) \n    .then((response) => {\n      return response.json()\n    })    \n    .then((json) => {\n      let loc = \"Other\";\n      if('district' in json.results[0].components){         \n        loc = json.results[0].components.district;\n        setUser({latitude: lat, longitude: long, location: loc}); \n      } else if ('town' in json.results[0].components){\n        loc = json.results[0].components.town;\n        setUser({latitude: lat, longitude: long, location: loc});           \n      } else {\n        setUser({latitude: lat, longitude: long, location: loc});  \n      }\n      //const {latitude, longitude, location} = user;\n      //console.log({latitude, longitude, location});\n      //return socket.emit('position',{latitude,longitude,location}); \n      return socket.emit('sendData',{lat,long,loc});\n  }); \n  }\n\n\n  function locateMe(){  \n      \n    Geolocation.getCurrentPosition(position =>{\n      findLocation(position.coords.latitude,position.coords.longitude); \n    }, error => {\n      console.log(\"couldn't get position\");\n    }, {enableHighAccuracy: true, timeout: 20000, maximumAge: 2000});  \n  } \n  \n\n  return (\n    <View style={styles.container}>\n      <Text>Welcome to GPS Sensor App!</Text>\n      <Button onPress={locateMe} title=\"Locate Me\"/>   \n      <Text>{user.latitude}</Text>\n      <Text>{user.longitude}</Text>\n      <Text>{user.location}</Text>  \n      <Text>{stats}</Text>\n      \n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}