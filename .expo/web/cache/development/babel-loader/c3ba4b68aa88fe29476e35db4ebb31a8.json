{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\allar\\\\OneDrive\\\\Escritorio\\\\CCT\\\\Mobile Development\\\\Projects\\\\gps-stats\\\\client\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\nvar socket = io.connect('http://localhost:3000');\nexport default function App() {\n  var _useState = useState({\n    latitude: 0,\n    longitude: 0,\n    location: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      group = _useState4[0],\n      setGroup = _useState4[1];\n\n  var findLocation = function findLocation(lat, long) {\n    var url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      if ('district' in json.results[0].components) {\n        console.log(json.results[0].components.district);\n        return json.results[0].components.district;\n      } else {\n        if ('town' in json.results[0].components) {\n          return json.results[0].components.district;\n        } else {\n          return \"Other\";\n        }\n      }\n    });\n  };\n\n  var locateMe = function locateMe() {\n    var lat = 0;\n    var long = 0;\n    var loc = '';\n    Geolocation.getCurrentPosition(function (pos) {\n      return pos.coords;\n    }).then(function (pos) {\n      console.log(pos);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"Welcome to GPS Sensor App!\"), React.createElement(Button, {\n    onPress: locateMe,\n    title: \"Locate Me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, user.latitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, user.longitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, user.location), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/allar/OneDrive/Escritorio/CCT/Mobile Development/Projects/gps-stats/client/App.js"],"names":["StatusBar","React","useState","io","Geolocation","socket","connect","App","latitude","longitude","location","user","setUser","group","setGroup","findLocation","lat","long","url","fetch","then","response","json","results","components","console","log","district","locateMe","loc","getCurrentPosition","pos","coords","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AAEA,IAAMC,MAAM,GAAGF,EAAE,CAACG,OAAH,CAAW,uBAAX,CAAf;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACJL,QAAQ,CAAC;AAACM,IAAAA,QAAQ,EAAE,CAAX;AAAcC,IAAAA,SAAS,EAAE,CAAzB;AAA4BC,IAAAA,QAAQ,EAAE;AAAtC,GAAD,CADJ;AAAA;AAAA,MACrBC,IADqB;AAAA,MACfC,OADe;;AAAA,mBAEFV,QAAQ,CAAC,EAAD,CAFN;AAAA;AAAA,MAErBW,KAFqB;AAAA,MAEdC,QAFc;;AAI5B,MAAIC,YAAY,GAAE,SAAdA,YAAc,CAACC,GAAD,EAAMC,IAAN,EAAc;AAC9B,QAAIC,GAAG,GAAG,yFAAyFF,GAAzF,GAA+F,GAA/F,GAAqGC,IAA/G;AACEE,IAAAA,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACM,UAACC,QAAD,EAAc;AAClB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHD,EAICF,IAJD,CAIM,UAACE,IAAD,EAAU;AACd,UAAG,cAAcA,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,UAAjC,EAA4C;AAC1CC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,UAAhB,CAA2BG,QAAvC;AACA,eAAOL,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,UAAhB,CAA2BG,QAAlC;AACD,OAHD,MAGO;AACL,YAAG,UAAUL,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,UAA7B,EAAwC;AACtC,iBAAOF,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBC,UAAhB,CAA2BG,QAAlC;AACD,SAFD,MAEO;AACL,iBAAO,OAAP;AACD;AACF;AACJ,KAfC;AAgBH,GAlBD;;AAoBA,MAAIC,QAAQ,GAAG,SAAXA,QAAW,GAAK;AAClB,QAAIZ,GAAG,GAAG,CAAV;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIY,GAAG,GAAG,EAAV;AAGAzB,IAAAA,WAAW,CAAC0B,kBAAZ,CAA+B,UAAAC,GAAG,EAAE;AAClC,aAAOA,GAAG,CAACC,MAAX;AACD,KAFD,EAGCZ,IAHD,CAGM,UAACW,GAAD,EAAO;AACXN,MAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AACD,KALD;AAkBD,GAxBD;;AA2BA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEN,QAAjB;AAA2B,IAAA,KAAK,EAAC,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOjB,IAAI,CAACH,QAAZ,CAHF,EAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOG,IAAI,CAACF,SAAZ,CAJF,EAKE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOE,IAAI,CAACD,QAAZ,CALF,EAME,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD;AAED,IAAMuB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport io from 'socket.io-client';\nimport Geolocation from '@react-native-community/geolocation';\n\nconst socket = io.connect('http://localhost:3000');\n\nexport default function App() {\n  const [user, setUser] = useState({latitude: 0, longitude: 0, location: ''});\n  const [group, setGroup] = useState([]);\n\n  let findLocation= (lat, long) =>{\n    let url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n      fetch(url) \n      .then((response) => {\n        return response.json()\n      })    \n      .then((json) => {\n        if('district' in json.results[0].components){\n          console.log(json.results[0].components.district);\n          return json.results[0].components.district;\n        } else {\n          if('town' in json.results[0].components){\n            return json.results[0].components.district;\n          } else {\n            return \"Other\";\n          }\n        }        \n    }); \n  }\n\n  let locateMe = () =>{   \n    let lat = 0;\n    let long = 0;\n    let loc = '';\n    \n\n    Geolocation.getCurrentPosition(pos=>{\n      return pos.coords;\n    })\n    .then((pos)=>{\n      console.log(pos);\n    });\n\n    \n            \n    /*setTimeout(()=>{\n      loc = findLocation(lat,long);   \n      console.log(loc);\n      setUser({latitude: lat, longitude: long, location: loc}); \n    },2000);  */\n    \n    \n    \n    //setGroup(...group,user);   \n  } \n  \n\n  return (\n    <View style={styles.container}>\n      <Text>Welcome to GPS Sensor App!</Text>\n      <Button onPress={locateMe} title=\"Locate Me\"/>   \n      <Text>{user.latitude}</Text>\n      <Text>{user.longitude}</Text>\n      <Text>{user.location}</Text>   \n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}