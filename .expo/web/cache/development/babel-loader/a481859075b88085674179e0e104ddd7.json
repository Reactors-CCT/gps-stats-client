{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\allar\\\\OneDrive\\\\Escritorio\\\\CCT\\\\Mobile Development\\\\Projects\\\\gps-stats\\\\client\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport io from 'socket.io-client';\nvar socket = io.connect('http://localhost:3000');\nexport default function App() {\n  var _useState = useState({\n    latitude: 0,\n    longitude: 0,\n    location: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      group = _useState4[0],\n      setGroup = _useState4[1];\n\n  var findLocation = function findLocation(lat, long) {\n    var url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n    fetch(url).then(function (json) {\n      if (json.results[0].components.district) {\n        return json.results[0].components.district;\n      } else {\n        if (json.results[0].components.town) {\n          return json.results[0].components.district;\n        } else {\n          return \"Other\";\n        }\n      }\n    });\n  };\n\n  var locateMe = function locateMe() {\n    Geolocation.getCurrentPosition(function (position) {\n      var lat = position.coords.latitude;\n      var long = position.coords.longitude;\n      var loc = findLocation(lat, long);\n      setUser({\n        latitude: lat,\n        longitude: long,\n        location: loc\n      });\n      setGroup.apply(void 0, _toConsumableArray(group).concat([user]));\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Welcome to GPS Sensor App!\"), React.createElement(Button, {\n    onPress: locateMe,\n    title: \"Locate Me\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, user.latitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, user.longitude), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, user.location), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/allar/OneDrive/Escritorio/CCT/Mobile Development/Projects/gps-stats/client/App.js"],"names":["StatusBar","React","useState","io","socket","connect","App","latitude","longitude","location","user","setUser","group","setGroup","findLocation","lat","long","url","fetch","then","json","results","components","district","town","locateMe","Geolocation","getCurrentPosition","position","coords","loc","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, View, Button } from 'react-native';\nimport io from 'socket.io-client';\n\nconst socket = io.connect('http://localhost:3000');\n\nexport default function App() {\n  const [user, setUser] = useState({latitude: 0, longitude: 0, location: ''});\n  const [group, setGroup] = useState([]);\n\n  let findLocation= (lat, long) =>{\n    let url = 'https://api.opencagedata.com/geocode/v1/json?key=44a9f29b61514c1bb30d4781d418d6f3&q=' + lat + '+' + long;\n      fetch(url)     \n      .then((json) => {\n        if(json.results[0].components.district){\n          return json.results[0].components.district;\n        } else {\n          if(json.results[0].components.town){\n            return json.results[0].components.district;\n          } else {\n            return \"Other\";\n          }\n        }    \n    }); \n  }\n\n  let locateMe = () =>{\n    Geolocation.getCurrentPosition(position => {\n      //console.log(position);  \n      //setLatitude(53.351393);\n      //setLongitude(-6.4385659);\n      let lat = position.coords.latitude;\n      let long = position.coords.longitude;\n      let loc = findLocation(lat,long);\n      setUser({latitude: lat, longitude: long, location: loc});  \n      setGroup(...group,user);    \n    });\n  }\n  \n\n  return (\n    <View style={styles.container}>\n      <Text>Welcome to GPS Sensor App!</Text>\n      <Button onPress={locateMe} title=\"Locate Me\"/>   \n      <Text>{user.latitude}</Text>\n      <Text>{user.longitude}</Text>\n      <Text>{user.location}</Text>   \n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}